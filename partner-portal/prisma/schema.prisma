// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(PARTNER)
  status        UserStatus @default(ACTIVE)
  companyName   String?   @map("company_name")
  partnerId     String?   @unique @map("partner_id")
  permissions   Json?     @default("{}")
  
  // Audit fields
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")
  
  // Relationships
  accounts      Account[]
  sessions      Session[]
  partner       Partner?  @relation(fields: [partnerId], references: [id])
  apiKeys       ApiKey[]
  activities    Activity[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Partner {
  id              String        @id @default(cuid())
  companyName     String        @unique @map("company_name")
  contactEmail    String        @map("contact_email")
  contactPhone    String?       @map("contact_phone")
  website         String?
  description     String?       @db.Text
  tier            PartnerTier   @default(LITE)
  status          PartnerStatus @default(PENDING)
  
  // Business details
  industry        String?
  companySize     CompanySize?  @map("company_size")
  monthlyVolume   Int?          @map("monthly_volume")
  
  // Billing information
  billingEmail    String?       @map("billing_email")
  subscriptionId  String?       @unique @map("subscription_id")
  
  // API configuration
  webhookUrl      String?       @map("webhook_url")
  webhookSecret   String?       @map("webhook_secret")
  rateLimitTier   String?       @default("standard") @map("rate_limit_tier")
  
  // Audit fields
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  approvedAt      DateTime?     @map("approved_at")
  approvedBy      String?       @map("approved_by")
  
  // Relationships
  users           User[]
  apiKeys         ApiKey[]
  activities      Activity[]
  subscriptions   Subscription[]

  @@map("partners")
}

model ApiKey {
  id          String     @id @default(cuid())
  name        String
  key         String     @unique
  hashedKey   String     @map("hashed_key")
  partnerId   String     @map("partner_id")
  userId      String     @map("user_id")
  
  // Configuration
  scopes      String[]   @default([])
  environment Environment @default(SANDBOX)
  status      ApiKeyStatus @default(ACTIVE)
  
  // Usage tracking
  requestCount Int       @default(0) @map("request_count")
  lastUsedAt   DateTime? @map("last_used_at")
  
  // Security
  expiresAt    DateTime? @map("expires_at")
  ipWhitelist  String[]  @default([]) @map("ip_whitelist")
  
  // Audit fields
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  // Relationships
  partner      Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage        ApiUsage[]

  @@map("api_keys")
}

model ApiUsage {
  id         String   @id @default(cuid())
  apiKeyId   String   @map("api_key_id")
  endpoint   String
  method     String
  statusCode Int      @map("status_code")
  responseTime Int    @map("response_time")
  requestSize  Int?   @map("request_size")
  responseSize Int?   @map("response_size")
  userAgent    String? @map("user_agent")
  ipAddress    String? @map("ip_address")
  
  // Timestamps
  timestamp  DateTime @default(now())
  
  // Relationships
  apiKey     ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@map("api_usage")
  @@index([apiKeyId, timestamp])
  @@index([timestamp])
}

model Subscription {
  id             String            @id @default(cuid())
  partnerId      String            @map("partner_id")
  tier           PartnerTier
  status         SubscriptionStatus @default(ACTIVE)
  
  // Billing
  stripeCustomerId    String? @unique @map("stripe_customer_id")
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")
  stripePriceId       String? @map("stripe_price_id")
  
  // Pricing
  monthlyPrice       Decimal? @map("monthly_price") @db.Decimal(10, 2)
  yearlyPrice        Decimal? @map("yearly_price") @db.Decimal(10, 2)
  billingCycle       BillingCycle @default(MONTHLY) @map("billing_cycle")
  
  // Limits
  apiCallsLimit      Int?     @map("api_calls_limit")
  usersLimit         Int?     @map("users_limit")
  storageLimit       Int?     @map("storage_limit")
  
  // Timestamps
  currentPeriodStart DateTime @map("current_period_start")
  currentPeriodEnd   DateTime @map("current_period_end")
  trialStart         DateTime? @map("trial_start")
  trialEnd           DateTime? @map("trial_end")
  cancelAt           DateTime? @map("cancel_at")
  canceledAt         DateTime? @map("canceled_at")
  
  // Audit fields
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  
  // Relationships
  partner            Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Activity {
  id          String       @id @default(cuid())
  partnerId   String?      @map("partner_id")
  userId      String?      @map("user_id")
  type        ActivityType
  action      String
  description String?
  metadata    Json?        @default("{}")
  ipAddress   String?      @map("ip_address")
  userAgent   String?      @map("user_agent")
  
  // Timestamps
  timestamp   DateTime     @default(now())
  
  // Relationships
  partner     Partner?     @relation(fields: [partnerId], references: [id], onDelete: SetNull)
  user        User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activities")
  @@index([partnerId, timestamp])
  @@index([userId, timestamp])
  @@index([timestamp])
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  PARTNER_ADMIN
  PARTNER
  DEVELOPER
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum PartnerTier {
  LITE
  PRO
  ELITE
  BLACK
}

enum PartnerStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum Environment {
  SANDBOX
  PRODUCTION
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
  REVOKED
  EXPIRED
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum ActivityType {
  USER_LOGIN
  USER_LOGOUT
  USER_REGISTRATION
  API_KEY_CREATED
  API_KEY_REVOKED
  API_CALL
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELED
  PARTNER_APPROVED
  PARTNER_SUSPENDED
  WEBHOOK_CONFIGURED
  SECURITY_EVENT
  SYSTEM_EVENT
}